diff --git a/drivers/net/ovpn/netlink.c b/drivers/net/ovpn/netlink.c
index 1dd7e76..41435ae 100644
--- a/drivers/net/ovpn/netlink.c
+++ b/drivers/net/ovpn/netlink.c
@@ -6,6 +6,12 @@
  *  Author:	Antonio Quartulli <antonio@openvpn.net>
  */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+#include <linux/file.h>
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 5, 0) && RHEL_RELEASE_CODE == 0
+#include <uapi/linux/netfilter/nfnetlink.h>
+#endif
 #include <linux/netdevice.h>
 #include <linux/types.h>
 #include <net/genetlink.h>
@@ -40,7 +46,11 @@ ovpn_get_dev_from_attrs(struct net *net, const struct genl_info *info,
 	struct net_device *dev;
 	int ifindex;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	if (GENL_REQ_ATTR_CHECK((struct genl_info *)info, OVPN_A_IFINDEX))
+#else
 	if (GENL_REQ_ATTR_CHECK(info, OVPN_A_IFINDEX))
+#endif
 		return ERR_PTR(-EINVAL);
 
 	ifindex = nla_get_u32(info->attrs[OVPN_A_IFINDEX]);
@@ -84,6 +94,73 @@ int ovpn_nl_pre_doit(const struct genl_split_ops *ops, struct sk_buff *skb,
 	return 0;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0) && \
+	RHEL_RELEASE_CODE <= RHEL_RELEASE_VERSION(9, 4) && \
+	SUSE_PRODUCT_CODE < SUSE_PRODUCT(1, 15, 6, 0)
+static struct ovpn_priv *
+ovpn_get_dev_from_attrs_cb(struct net *net, struct netlink_callback *cb,
+			netdevice_tracker *tracker)
+{
+	struct ovpn_priv *ovpn;
+	struct net_device *dev;
+	int ifindex;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 5, 0) && RHEL_RELEASE_CODE == 0
+	extern const struct nla_policy
+		ovpn_peer_get_dump_nl_policy[OVPN_A_IFINDEX + 1];
+	int min_len = nlmsg_total_size(sizeof(struct nfgenmsg));
+	struct nlmsghdr *nlh = nlmsg_hdr(cb->skb);
+	struct nlattr *attrs[OVPN_A_IFINDEX + 1];
+	void *payload = (void *)nlh + min_len;
+	int payload_len = nlh->nlmsg_len - min_len;
+
+	int err = nla_parse(attrs, OVPN_A_IFINDEX, payload, payload_len,
+			ovpn_peer_get_dump_nl_policy, NULL);
+	if (err)
+		return ERR_PTR(err);
+#else
+	struct nlattr **attrs = genl_dumpit_info(cb)->attrs;
+#endif
+
+	if (!attrs[OVPN_A_IFINDEX])
+		return ERR_PTR(-EINVAL);
+
+	ifindex = nla_get_u32(attrs[OVPN_A_IFINDEX]);
+
+	rcu_read_lock();
+	dev = dev_get_by_index_rcu(net, ifindex);
+	if (!dev) {
+		rcu_read_unlock();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+		NL_SET_ERR_MSG_MOD(NULL,
+#else
+		NL_SET_ERR_MSG_MOD(cb->extack,
+#endif
+				   "ifindex does not match any interface");
+		return ERR_PTR(-ENODEV);
+	}
+
+	if (!ovpn_dev_is_valid(dev)) {
+		rcu_read_unlock();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+		NL_SET_ERR_MSG_MOD(NULL,
+				   "specified interface is not ovpn");
+#else
+		NL_SET_ERR_MSG_MOD(cb->extack,
+				   "specified interface is not ovpn");
+		NL_SET_BAD_ATTR(cb->extack, attrs[OVPN_A_IFINDEX]);
+#endif
+		return ERR_PTR(-EINVAL);
+	}
+
+	ovpn = netdev_priv(dev);
+	netdev_hold(dev, tracker, GFP_ATOMIC);
+	rcu_read_unlock();
+
+	return ovpn;
+}
+#endif
+
 void ovpn_nl_post_doit(const struct genl_split_ops *ops, struct sk_buff *skb,
 		       struct genl_info *info)
 {
@@ -536,9 +613,30 @@ int ovpn_nl_peer_set_doit(struct sk_buff *skb, struct genl_info *info)
 	return 0;
 }
 
-static int ovpn_nl_send_peer(struct sk_buff *skb, const struct genl_info *info,
-			     const struct ovpn_peer *peer, u32 portid, u32 seq,
-			     int flags)
+static inline int ovpn_nl_socket_netnsid(const struct genl_info *info,
+					 struct net *net,
+					 struct ovpn_socket *sock)
+{
+	int id = -1;
+	if (!info) {
+		if (!net_eq(net, sock_net(sock->sk))) {
+			id = peernet2id_alloc(net,
+					      sock_net(sock->sk),
+					      GFP_ATOMIC);
+		}
+	} else {
+		if (!net_eq(genl_info_net(info), sock_net(sock->sk))) {
+			id = peernet2id_alloc(net,
+					      sock_net(sock->sk),
+					      GFP_ATOMIC);
+		}
+	}
+	return id;
+}
+
+static int ovpn_nl_send_peer_common(struct sk_buff *skb, struct net *net,
+				    const struct genl_info *info, const struct ovpn_peer *peer,
+				    u32 portid, u32 seq, int flags)
 {
 	const struct ovpn_bind *bind;
 	struct ovpn_socket *sock;
@@ -564,13 +662,9 @@ static int ovpn_nl_send_peer(struct sk_buff *skb, const struct genl_info *info,
 		goto err_unlock;
 	}
 
-	if (!net_eq(genl_info_net(info), sock_net(sock->sk))) {
-		id = peernet2id_alloc(genl_info_net(info),
-				      sock_net(sock->sk),
-				      GFP_ATOMIC);
-		if (nla_put_s32(skb, OVPN_A_PEER_SOCKET_NETNSID, id))
+	id = ovpn_nl_socket_netnsid(info, net, sock);
+	if (id != -1 && nla_put_s32(skb, OVPN_A_PEER_SOCKET_NETNSID, id))
 			goto err_unlock;
-	}
 	local_port = inet_sk(sock->sk)->inet_sport;
 	rcu_read_unlock();
 
@@ -652,6 +746,23 @@ static int ovpn_nl_send_peer(struct sk_buff *skb, const struct genl_info *info,
 	return ret;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0) && \
+	RHEL_RELEASE_CODE <= RHEL_RELEASE_VERSION(9, 4) && \
+	SUSE_PRODUCT_CODE < SUSE_PRODUCT(1, 15, 6, 0)
+static int ovpn_nl_send_peer_net(struct sk_buff *skb, struct net *net,
+			     const struct ovpn_peer *peer, u32 portid, u32 seq,
+			     int flags)
+{
+	return ovpn_nl_send_peer_common(skb, net, NULL, peer, portid, seq, flags);
+}
+#endif
+static int ovpn_nl_send_peer(struct sk_buff *skb, const struct genl_info *info,
+			     const struct ovpn_peer *peer, u32 portid, u32 seq,
+			     int flags)
+{
+	return ovpn_nl_send_peer_common(skb, NULL, info, peer, portid, seq, flags);
+}
+
 int ovpn_nl_peer_get_doit(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *attrs[OVPN_A_PEER_MAX + 1];
@@ -702,13 +813,25 @@ int ovpn_nl_peer_get_doit(struct sk_buff *skb, struct genl_info *info)
 
 int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || \
+	RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5) || \
+	SUSE_PRODUCT_CODE >= SUSE_PRODUCT(1, 15, 6, 0)
 	const struct genl_info *info = genl_info_dump(cb);
+#else
+	struct net *net = sock_net(skb->sk);
+#endif
 	int bkt, last_idx = cb->args[1], dumped = 0;
 	netdevice_tracker tracker;
 	struct ovpn_priv *ovpn;
 	struct ovpn_peer *peer;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || \
+	RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5) || \
+	SUSE_PRODUCT_CODE >= SUSE_PRODUCT(1, 15, 6, 0)
 	ovpn = ovpn_get_dev_from_attrs(sock_net(cb->skb->sk), info, &tracker);
+#else
+	ovpn = ovpn_get_dev_from_attrs_cb(sock_net(cb->skb->sk), cb, &tracker);
+#endif
 	if (IS_ERR(ovpn))
 		return PTR_ERR(ovpn);
 
@@ -720,10 +843,19 @@ int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 		rcu_read_lock();
 		peer = rcu_dereference(ovpn->peer);
 		if (peer) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || \
+	RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5) || \
+	SUSE_PRODUCT_CODE >= SUSE_PRODUCT(1, 15, 6, 0)
 			if (ovpn_nl_send_peer(skb, info, peer,
 					      NETLINK_CB(cb->skb).portid,
 					      cb->nlh->nlmsg_seq,
 					      NLM_F_MULTI) == 0)
+#else
+			if (ovpn_nl_send_peer_net(skb, net, peer,
+					      NETLINK_CB(cb->skb).portid,
+					      cb->nlh->nlmsg_seq,
+					      NLM_F_MULTI) == 0)
+#endif
 				dumped++;
 		}
 		rcu_read_unlock();
@@ -739,10 +871,19 @@ int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 				continue;
 			}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || \
+	RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5) || \
+	SUSE_PRODUCT_CODE >= SUSE_PRODUCT(1, 15, 6, 0)
 			if (ovpn_nl_send_peer(skb, info, peer,
 					      NETLINK_CB(cb->skb).portid,
 					      cb->nlh->nlmsg_seq,
 					      NLM_F_MULTI) < 0)
+#else
+			if (ovpn_nl_send_peer_net(skb, net, peer,
+					      NETLINK_CB(cb->skb).portid,
+					      cb->nlh->nlmsg_seq,
+					      NLM_F_MULTI) < 0)
+#endif
 				break;
 
 			/* count peers being dumped during this invocation */
@@ -1242,6 +1383,7 @@ int ovpn_nl_key_swap_notify(struct ovpn_peer *peer, u8 key_id)
  *
  * Return: 0 on success, a negative error code otherwise
  */
+
 int __init ovpn_nl_register(void)
 {
 	int ret = genl_register_family(&ovpn_nl_family);
