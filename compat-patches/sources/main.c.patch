diff --git a/drivers/net/ovpn/main.c b/drivers/net/ovpn/main.c
index 1bb1afe..8f3ed94 100644
--- a/drivers/net/ovpn/main.c
+++ b/drivers/net/ovpn/main.c
@@ -85,6 +85,12 @@ static int ovpn_net_init(struct net_device *dev)
 		return err;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
+	if (!dev->tstats)
+		return -ENOMEM;
+#endif
+
 	return 0;
 }
 
@@ -93,22 +99,30 @@ static void ovpn_net_uninit(struct net_device *dev)
 	struct ovpn_priv *ovpn = netdev_priv(dev);
 
 	gro_cells_destroy(&ovpn->gro_cells);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	free_percpu(dev->tstats);
+#endif
 }
 
 static const struct net_device_ops ovpn_netdev_ops = {
 	.ndo_init		= ovpn_net_init,
 	.ndo_uninit		= ovpn_net_uninit,
 	.ndo_start_xmit		= ovpn_net_xmit,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	.ndo_get_stats64	= dev_get_tstats64,
+#endif
 };
 
 static const struct device_type ovpn_type = {
 	.name = OVPN_FAMILY_NAME,
 };
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0) || RHEL_RELEASE_CODE != 0
 static const struct nla_policy ovpn_policy[IFLA_OVPN_MAX + 1] = {
 	[IFLA_OVPN_MODE] = NLA_POLICY_RANGE(NLA_U8, OVPN_MODE_P2P,
 					    OVPN_MODE_MP),
 };
+#endif
 
 /**
  * ovpn_dev_is_valid - check if the netdevice is of type 'ovpn'
@@ -141,7 +155,11 @@ static void ovpn_setup(struct net_device *dev)
 
 	dev->needs_free_netdev = true;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 	dev->pcpu_stat_type = NETDEV_PCPU_STAT_DSTATS;
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 9, 0)
+	dev->pcpu_stat_type = NETDEV_PCPU_STAT_TSTATS;
+#endif
 
 	dev->ethtool_ops = &ovpn_ethtool_ops;
 	dev->netdev_ops = &ovpn_netdev_ops;
@@ -174,6 +192,7 @@ static void ovpn_setup(struct net_device *dev)
 	SET_NETDEV_DEVTYPE(dev, &ovpn_type);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
 static int ovpn_newlink(struct net_device *dev,
 			struct rtnl_newlink_params *params,
 			struct netlink_ext_ack *extack)
@@ -207,6 +226,40 @@ static int ovpn_newlink(struct net_device *dev,
 
 	return register_netdevice(dev);
 }
+#else
+static int ovpn_newlink(struct net *src_net, struct net_device *dev,
+			struct nlattr *tb[], struct nlattr *data[],
+			struct netlink_ext_ack *extack)
+{
+	struct ovpn_priv *ovpn = netdev_priv(dev);
+	enum ovpn_mode mode = OVPN_MODE_P2P;
+
+	if (data && data[IFLA_OVPN_MODE]) {
+		mode = nla_get_u8(data[IFLA_OVPN_MODE]);
+		netdev_dbg(dev, "setting device mode: %u\n", mode);
+	}
+
+	ovpn->dev = dev;
+	ovpn->mode = mode;
+	spin_lock_init(&ovpn->lock);
+	INIT_DELAYED_WORK(&ovpn->keepalive_work, ovpn_peer_keepalive_work);
+
+	/* Set carrier explicitly after registration, this way state is
+	 * clearly defined.
+	 *
+	 * In case of MP interfaces we keep the carrier always on.
+	 *
+	 * Carrier for P2P interfaces is initially off and it is then
+	 * switched on and off when the remote peer is added or deleted.
+	 */
+	if (ovpn->mode == OVPN_MODE_MP)
+		netif_carrier_on(dev);
+	else
+		netif_carrier_off(dev);
+
+	return register_netdevice(dev);
+}
+#endif
 
 static void ovpn_dellink(struct net_device *dev, struct list_head *head)
 {
@@ -229,10 +282,14 @@ static int ovpn_fill_info(struct sk_buff *skb, const struct net_device *dev)
 
 static struct rtnl_link_ops ovpn_link_ops = {
 	.kind = "ovpn",
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 12, 0) || RHEL_RELEASE_CODE != 0
 	.netns_refund = false,
+#endif
 	.priv_size = sizeof(struct ovpn_priv),
 	.setup = ovpn_setup,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0) || RHEL_RELEASE_CODE != 0
 	.policy = ovpn_policy,
+#endif
 	.maxtype = IFLA_OVPN_MAX,
 	.newlink = ovpn_newlink,
 	.dellink = ovpn_dellink,
