diff --git a/drivers/net/ovpn/crypto_aead.c b/drivers/net/ovpn/crypto_aead.c
index 2cca759..ff44ea5 100644
--- a/drivers/net/ovpn/crypto_aead.c
+++ b/drivers/net/ovpn/crypto_aead.c
@@ -36,6 +36,13 @@ static int ovpn_aead_encap_overhead(const struct ovpn_crypto_key_slot *ks)
 		crypto_aead_authsize(ks->encrypt);	/* Auth Tag */
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
+static inline void ovpn_encrypt_post_compl(struct crypto_async_request *req, int ret)
+{
+	ovpn_encrypt_post(req->data, ret);
+}
+#endif
+
 int ovpn_aead_encrypt(struct ovpn_peer *peer, struct ovpn_crypto_key_slot *ks,
 		      struct sk_buff *skb)
 {
@@ -138,7 +145,11 @@ int ovpn_aead_encrypt(struct ovpn_peer *peer, struct ovpn_crypto_key_slot *ks,
 
 	/* setup async crypto operation */
 	aead_request_set_tfm(req, ks->encrypt);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
+	aead_request_set_callback(req, 0, ovpn_encrypt_post_compl, skb);
+#else
 	aead_request_set_callback(req, 0, ovpn_encrypt_post, skb);
+#endif
 	aead_request_set_crypt(req, sg, sg,
 			       skb->len - ovpn_aead_encap_overhead(ks), iv);
 	aead_request_set_ad(req, OVPN_AAD_SIZE);
@@ -147,6 +158,13 @@ int ovpn_aead_encrypt(struct ovpn_peer *peer, struct ovpn_crypto_key_slot *ks,
 	return crypto_aead_encrypt(req);
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
+static inline void ovpn_decrypt_post_compl(struct crypto_async_request *req, int ret)
+{
+	ovpn_decrypt_post(req->data, ret);
+}
+#endif
+
 int ovpn_aead_decrypt(struct ovpn_peer *peer, struct ovpn_crypto_key_slot *ks,
 		      struct sk_buff *skb)
 {
@@ -233,7 +251,11 @@ int ovpn_aead_decrypt(struct ovpn_peer *peer, struct ovpn_crypto_key_slot *ks,
 
 	/* setup async crypto operation */
 	aead_request_set_tfm(req, ks->decrypt);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 3, 0)
+	aead_request_set_callback(req, 0, ovpn_decrypt_post_compl, skb);
+#else
 	aead_request_set_callback(req, 0, ovpn_decrypt_post, skb);
+#endif
 	aead_request_set_crypt(req, sg, sg, payload_len + tag_size, iv);
 
 	aead_request_set_ad(req, OVPN_AAD_SIZE);
diff --git a/drivers/net/ovpn/io.c b/drivers/net/ovpn/io.c
index 10d8afe..b321033 100644
--- a/drivers/net/ovpn/io.c
+++ b/drivers/net/ovpn/io.c
@@ -87,7 +87,11 @@ static void ovpn_netdev_write(struct ovpn_peer *peer, struct sk_buff *skb)
 	if (likely(ret == NET_RX_SUCCESS)) {
 		/* update RX stats with the size of decrypted packet */
 		ovpn_peer_stats_increment_rx(&peer->vpn_stats, pkt_len);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_rx_add(peer->ovpn->dev, pkt_len);
+#else
+		dev_sw_netstats_rx_add(peer->ovpn->dev, pkt_len);
+#endif
 	}
 }
 
@@ -189,7 +193,11 @@ void ovpn_decrypt_post(void *data, int ret)
 	skb = NULL;
 drop:
 	if (unlikely(skb))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_rx_dropped(peer->ovpn->dev);
+#else
+		dev_core_stats_rx_dropped_inc(peer->ovpn->dev);
+#endif
 	kfree_skb(skb);
 drop_nocount:
 	if (likely(peer))
@@ -213,7 +221,11 @@ void ovpn_recv(struct ovpn_peer *peer, struct sk_buff *skb)
 		net_info_ratelimited("%s: no available key for peer %u, key-id: %u\n",
 				     netdev_name(peer->ovpn->dev), peer->id,
 				     key_id);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_rx_dropped(peer->ovpn->dev);
+#else
+		dev_core_stats_rx_dropped_inc(peer->ovpn->dev);
+#endif
 		kfree_skb(skb);
 		ovpn_peer_put(peer);
 		return;
@@ -291,7 +303,11 @@ void ovpn_encrypt_post(void *data, int ret)
 	rcu_read_unlock();
 err:
 	if (unlikely(skb))
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_tx_dropped(peer->ovpn->dev);
+#else
+		dev_core_stats_tx_dropped_inc(peer->ovpn->dev);
+#endif
 	if (likely(peer))
 		ovpn_peer_put(peer);
 	if (likely(ks))
@@ -333,7 +349,11 @@ static void ovpn_send(struct ovpn_priv *ovpn, struct sk_buff *skb,
 	 */
 	skb_list_walk_safe(skb, curr, next) {
 		if (unlikely(!ovpn_encrypt_one(peer, curr))) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 			dev_dstats_tx_dropped(ovpn->dev);
+#else
+			dev_core_stats_tx_dropped_inc(ovpn->dev);
+#endif
 			kfree_skb(curr);
 		}
 	}
@@ -383,7 +403,11 @@ netdev_tx_t ovpn_net_xmit(struct sk_buff *skb, struct net_device *dev)
 		if (unlikely(!curr)) {
 			net_err_ratelimited("%s: skb_share_check failed for payload packet\n",
 					    netdev_name(dev));
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 			dev_dstats_tx_dropped(ovpn->dev);
+#else
+			dev_core_stats_tx_dropped_inc(ovpn->dev);
+#endif
 			continue;
 		}
 
@@ -417,7 +441,11 @@ netdev_tx_t ovpn_net_xmit(struct sk_buff *skb, struct net_device *dev)
 	return NETDEV_TX_OK;
 
 drop:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 	dev_dstats_tx_dropped(ovpn->dev);
+#else
+	dev_core_stats_tx_dropped_inc(ovpn->dev);
+#endif
 	skb_tx_error(skb);
 	kfree_skb_list(skb);
 	return NETDEV_TX_OK;
diff --git a/drivers/net/ovpn/main.c b/drivers/net/ovpn/main.c
index 1bb1afe..8f3ed94 100644
--- a/drivers/net/ovpn/main.c
+++ b/drivers/net/ovpn/main.c
@@ -85,6 +85,12 @@ static int ovpn_net_init(struct net_device *dev)
 		return err;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	dev->tstats = netdev_alloc_pcpu_stats(struct pcpu_sw_netstats);
+	if (!dev->tstats)
+		return -ENOMEM;
+#endif
+
 	return 0;
 }
 
@@ -93,22 +99,30 @@ static void ovpn_net_uninit(struct net_device *dev)
 	struct ovpn_priv *ovpn = netdev_priv(dev);
 
 	gro_cells_destroy(&ovpn->gro_cells);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	free_percpu(dev->tstats);
+#endif
 }
 
 static const struct net_device_ops ovpn_netdev_ops = {
 	.ndo_init		= ovpn_net_init,
 	.ndo_uninit		= ovpn_net_uninit,
 	.ndo_start_xmit		= ovpn_net_xmit,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	.ndo_get_stats64	= dev_get_tstats64,
+#endif
 };
 
 static const struct device_type ovpn_type = {
 	.name = OVPN_FAMILY_NAME,
 };
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0) || RHEL_RELEASE_CODE != 0
 static const struct nla_policy ovpn_policy[IFLA_OVPN_MAX + 1] = {
 	[IFLA_OVPN_MODE] = NLA_POLICY_RANGE(NLA_U8, OVPN_MODE_P2P,
 					    OVPN_MODE_MP),
 };
+#endif
 
 /**
  * ovpn_dev_is_valid - check if the netdevice is of type 'ovpn'
@@ -141,7 +155,11 @@ static void ovpn_setup(struct net_device *dev)
 
 	dev->needs_free_netdev = true;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 	dev->pcpu_stat_type = NETDEV_PCPU_STAT_DSTATS;
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(6, 9, 0)
+	dev->pcpu_stat_type = NETDEV_PCPU_STAT_TSTATS;
+#endif
 
 	dev->ethtool_ops = &ovpn_ethtool_ops;
 	dev->netdev_ops = &ovpn_netdev_ops;
@@ -174,6 +192,7 @@ static void ovpn_setup(struct net_device *dev)
 	SET_NETDEV_DEVTYPE(dev, &ovpn_type);
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 15, 0)
 static int ovpn_newlink(struct net_device *dev,
 			struct rtnl_newlink_params *params,
 			struct netlink_ext_ack *extack)
@@ -207,6 +226,40 @@ static int ovpn_newlink(struct net_device *dev,
 
 	return register_netdevice(dev);
 }
+#else
+static int ovpn_newlink(struct net *src_net, struct net_device *dev,
+			struct nlattr *tb[], struct nlattr *data[],
+			struct netlink_ext_ack *extack)
+{
+	struct ovpn_priv *ovpn = netdev_priv(dev);
+	enum ovpn_mode mode = OVPN_MODE_P2P;
+
+	if (data && data[IFLA_OVPN_MODE]) {
+		mode = nla_get_u8(data[IFLA_OVPN_MODE]);
+		netdev_dbg(dev, "setting device mode: %u\n", mode);
+	}
+
+	ovpn->dev = dev;
+	ovpn->mode = mode;
+	spin_lock_init(&ovpn->lock);
+	INIT_DELAYED_WORK(&ovpn->keepalive_work, ovpn_peer_keepalive_work);
+
+	/* Set carrier explicitly after registration, this way state is
+	 * clearly defined.
+	 *
+	 * In case of MP interfaces we keep the carrier always on.
+	 *
+	 * Carrier for P2P interfaces is initially off and it is then
+	 * switched on and off when the remote peer is added or deleted.
+	 */
+	if (ovpn->mode == OVPN_MODE_MP)
+		netif_carrier_on(dev);
+	else
+		netif_carrier_off(dev);
+
+	return register_netdevice(dev);
+}
+#endif
 
 static void ovpn_dellink(struct net_device *dev, struct list_head *head)
 {
@@ -229,10 +282,14 @@ static int ovpn_fill_info(struct sk_buff *skb, const struct net_device *dev)
 
 static struct rtnl_link_ops ovpn_link_ops = {
 	.kind = "ovpn",
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 12, 0) || RHEL_RELEASE_CODE != 0
 	.netns_refund = false,
+#endif
 	.priv_size = sizeof(struct ovpn_priv),
 	.setup = ovpn_setup,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0) || RHEL_RELEASE_CODE != 0
 	.policy = ovpn_policy,
+#endif
 	.maxtype = IFLA_OVPN_MAX,
 	.newlink = ovpn_newlink,
 	.dellink = ovpn_dellink,
diff --git a/drivers/net/ovpn/netlink.c b/drivers/net/ovpn/netlink.c
index bea0391..146d34d 100644
--- a/drivers/net/ovpn/netlink.c
+++ b/drivers/net/ovpn/netlink.c
@@ -6,6 +6,12 @@
  *  Author:	Antonio Quartulli <antonio@openvpn.net>
  */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+#include <linux/file.h>
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 5, 0) && RHEL_RELEASE_CODE == 0
+#include <uapi/linux/netfilter/nfnetlink.h>
+#endif
 #include <linux/netdevice.h>
 #include <linux/types.h>
 #include <net/genetlink.h>
@@ -40,7 +46,11 @@ ovpn_get_dev_from_attrs(struct net *net, const struct genl_info *info,
 	struct net_device *dev;
 	int ifindex;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 9, 0)
+	if (GENL_REQ_ATTR_CHECK((struct genl_info *)info, OVPN_A_IFINDEX))
+#else
 	if (GENL_REQ_ATTR_CHECK(info, OVPN_A_IFINDEX))
+#endif
 		return ERR_PTR(-EINVAL);
 
 	ifindex = nla_get_u32(info->attrs[OVPN_A_IFINDEX]);
@@ -84,6 +94,71 @@ int ovpn_nl_pre_doit(const struct genl_split_ops *ops, struct sk_buff *skb,
 	return 0;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0) && RHEL_RELEASE_CODE <= RHEL_RELEASE_VERSION(9, 4)
+static struct ovpn_priv *
+ovpn_get_dev_from_attrs_cb(struct net *net, struct netlink_callback *cb,
+			netdevice_tracker *tracker)
+{
+	struct ovpn_priv *ovpn;
+	struct net_device *dev;
+	int ifindex;
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 5, 0) && RHEL_RELEASE_CODE == 0
+	extern const struct nla_policy
+		ovpn_peer_get_dump_nl_policy[OVPN_A_IFINDEX + 1];
+	int min_len = nlmsg_total_size(sizeof(struct nfgenmsg));
+	struct nlmsghdr *nlh = nlmsg_hdr(cb->skb);
+	struct nlattr *attrs[OVPN_A_IFINDEX + 1];
+	void *payload = (void *)nlh + min_len;
+	int payload_len = nlh->nlmsg_len - min_len;
+
+	int err = nla_parse(attrs, OVPN_A_IFINDEX, payload, payload_len,
+			ovpn_peer_get_dump_nl_policy, NULL);
+	if (err)
+		return ERR_PTR(err);
+#else
+	struct nlattr **attrs = genl_dumpit_info(cb)->attrs;
+#endif
+
+	if (!attrs[OVPN_A_IFINDEX])
+		return ERR_PTR(-EINVAL);
+
+	ifindex = nla_get_u32(attrs[OVPN_A_IFINDEX]);
+
+	rcu_read_lock();
+	dev = dev_get_by_index_rcu(net, ifindex);
+	if (!dev) {
+		rcu_read_unlock();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+		NL_SET_ERR_MSG_MOD(NULL,
+#else
+		NL_SET_ERR_MSG_MOD(cb->extack,
+#endif
+				   "ifindex does not match any interface");
+		return ERR_PTR(-ENODEV);
+	}
+
+	if (!ovpn_dev_is_valid(dev)) {
+		rcu_read_unlock();
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 20, 0) && RHEL_RELEASE_CODE == 0
+		NL_SET_ERR_MSG_MOD(NULL,
+				   "specified interface is not ovpn");
+#else
+		NL_SET_ERR_MSG_MOD(cb->extack,
+				   "specified interface is not ovpn");
+		NL_SET_BAD_ATTR(cb->extack, attrs[OVPN_A_IFINDEX]);
+#endif
+		return ERR_PTR(-EINVAL);
+	}
+
+	ovpn = netdev_priv(dev);
+	netdev_hold(dev, tracker, GFP_ATOMIC);
+	rcu_read_unlock();
+
+	return ovpn;
+}
+#endif
+
 void ovpn_nl_post_doit(const struct genl_split_ops *ops, struct sk_buff *skb,
 		       struct genl_info *info)
 {
@@ -647,6 +722,124 @@ static int ovpn_nl_send_peer(struct sk_buff *skb, const struct genl_info *info,
 	return ret;
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 6, 0) && RHEL_RELEASE_CODE <= RHEL_RELEASE_VERSION(9, 4)
+static int ovpn_nl_send_peer_net(struct sk_buff *skb, struct net *net,
+			     const struct ovpn_peer *peer, u32 portid, u32 seq,
+			     int flags)
+{
+	const struct ovpn_bind *bind;
+	struct ovpn_socket *sock;
+	int ret = -EMSGSIZE;
+	struct nlattr *attr;
+	__be16 local_port;
+	void *hdr;
+	int id;
+
+	hdr = genlmsg_put(skb, portid, seq, &ovpn_nl_family, flags,
+			  OVPN_CMD_PEER_GET);
+	if (!hdr)
+		return -ENOBUFS;
+
+	attr = nla_nest_start(skb, OVPN_A_PEER);
+	if (!attr)
+		goto err;
+
+	rcu_read_lock();
+	sock = rcu_dereference(peer->sock);
+	if (!sock) {
+		ret = -EINVAL;
+		goto err_unlock;
+	}
+
+	if (!net_eq(net, sock_net(sock->sock->sk))) {
+		id = peernet2id_alloc(net,
+				      sock_net(sock->sock->sk),
+				      GFP_ATOMIC);
+		if (nla_put_s32(skb, OVPN_A_PEER_SOCKET_NETNSID, id))
+			goto err_unlock;
+	}
+	local_port = inet_sk(sock->sock->sk)->inet_sport;
+	rcu_read_unlock();
+
+	if (nla_put_u32(skb, OVPN_A_PEER_ID, peer->id))
+		goto err;
+
+	if (peer->vpn_addrs.ipv4.s_addr != htonl(INADDR_ANY))
+		if (nla_put_in_addr(skb, OVPN_A_PEER_VPN_IPV4,
+				    peer->vpn_addrs.ipv4.s_addr))
+			goto err;
+
+	if (!ipv6_addr_equal(&peer->vpn_addrs.ipv6, &in6addr_any))
+		if (nla_put_in6_addr(skb, OVPN_A_PEER_VPN_IPV6,
+				     &peer->vpn_addrs.ipv6))
+			goto err;
+
+	if (nla_put_u32(skb, OVPN_A_PEER_KEEPALIVE_INTERVAL,
+			peer->keepalive_interval) ||
+	    nla_put_u32(skb, OVPN_A_PEER_KEEPALIVE_TIMEOUT,
+			peer->keepalive_timeout))
+		goto err;
+
+	rcu_read_lock();
+	bind = rcu_dereference(peer->bind);
+	if (bind) {
+		if (bind->remote.in4.sin_family == AF_INET) {
+			if (nla_put_in_addr(skb, OVPN_A_PEER_REMOTE_IPV4,
+					    bind->remote.in4.sin_addr.s_addr) ||
+			    nla_put_net16(skb, OVPN_A_PEER_REMOTE_PORT,
+					  bind->remote.in4.sin_port) ||
+			    nla_put_in_addr(skb, OVPN_A_PEER_LOCAL_IPV4,
+					    bind->local.ipv4.s_addr))
+				goto err_unlock;
+		} else if (bind->remote.in4.sin_family == AF_INET6) {
+			if (nla_put_in6_addr(skb, OVPN_A_PEER_REMOTE_IPV6,
+					     &bind->remote.in6.sin6_addr) ||
+			    nla_put_u32(skb, OVPN_A_PEER_REMOTE_IPV6_SCOPE_ID,
+					bind->remote.in6.sin6_scope_id) ||
+			    nla_put_net16(skb, OVPN_A_PEER_REMOTE_PORT,
+					  bind->remote.in6.sin6_port) ||
+			    nla_put_in6_addr(skb, OVPN_A_PEER_LOCAL_IPV6,
+					     &bind->local.ipv6))
+				goto err_unlock;
+		}
+	}
+	rcu_read_unlock();
+
+	if (nla_put_net16(skb, OVPN_A_PEER_LOCAL_PORT, local_port) ||
+	    /* VPN RX stats */
+	    nla_put_uint(skb, OVPN_A_PEER_VPN_RX_BYTES,
+			 atomic64_read(&peer->vpn_stats.rx.bytes)) ||
+	    nla_put_uint(skb, OVPN_A_PEER_VPN_RX_PACKETS,
+			 atomic64_read(&peer->vpn_stats.rx.packets)) ||
+	    /* VPN TX stats */
+	    nla_put_uint(skb, OVPN_A_PEER_VPN_TX_BYTES,
+			 atomic64_read(&peer->vpn_stats.tx.bytes)) ||
+	    nla_put_uint(skb, OVPN_A_PEER_VPN_TX_PACKETS,
+			 atomic64_read(&peer->vpn_stats.tx.packets)) ||
+	    /* link RX stats */
+	    nla_put_uint(skb, OVPN_A_PEER_LINK_RX_BYTES,
+			 atomic64_read(&peer->link_stats.rx.bytes)) ||
+	    nla_put_uint(skb, OVPN_A_PEER_LINK_RX_PACKETS,
+			 atomic64_read(&peer->link_stats.rx.packets)) ||
+	    /* link TX stats */
+	    nla_put_uint(skb, OVPN_A_PEER_LINK_TX_BYTES,
+			 atomic64_read(&peer->link_stats.tx.bytes)) ||
+	    nla_put_uint(skb, OVPN_A_PEER_LINK_TX_PACKETS,
+			 atomic64_read(&peer->link_stats.tx.packets)))
+		goto err;
+
+	nla_nest_end(skb, attr);
+	genlmsg_end(skb, hdr);
+
+	return 0;
+err_unlock:
+	rcu_read_unlock();
+err:
+	genlmsg_cancel(skb, hdr);
+	return ret;
+}
+#endif
+
 int ovpn_nl_peer_get_doit(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *attrs[OVPN_A_PEER_MAX + 1];
@@ -697,13 +890,21 @@ int ovpn_nl_peer_get_doit(struct sk_buff *skb, struct genl_info *info)
 
 int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5)
 	const struct genl_info *info = genl_info_dump(cb);
+#else
+	struct net *net = sock_net(skb->sk);
+#endif
 	int bkt, last_idx = cb->args[1], dumped = 0;
 	netdevice_tracker tracker;
 	struct ovpn_priv *ovpn;
 	struct ovpn_peer *peer;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5)
 	ovpn = ovpn_get_dev_from_attrs(sock_net(cb->skb->sk), info, &tracker);
+#else
+	ovpn = ovpn_get_dev_from_attrs_cb(sock_net(cb->skb->sk), cb, &tracker);
+#endif
 	if (IS_ERR(ovpn))
 		return PTR_ERR(ovpn);
 
@@ -715,10 +916,17 @@ int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 		rcu_read_lock();
 		peer = rcu_dereference(ovpn->peer);
 		if (peer) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5)
 			if (ovpn_nl_send_peer(skb, info, peer,
 					      NETLINK_CB(cb->skb).portid,
 					      cb->nlh->nlmsg_seq,
 					      NLM_F_MULTI) == 0)
+#else
+			if (ovpn_nl_send_peer_net(skb, net, peer,
+					      NETLINK_CB(cb->skb).portid,
+					      cb->nlh->nlmsg_seq,
+					      NLM_F_MULTI) == 0)
+#endif
 				dumped++;
 		}
 		rcu_read_unlock();
@@ -734,10 +942,17 @@ int ovpn_nl_peer_get_dumpit(struct sk_buff *skb, struct netlink_callback *cb)
 				continue;
 			}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 6, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 5)
 			if (ovpn_nl_send_peer(skb, info, peer,
 					      NETLINK_CB(cb->skb).portid,
 					      cb->nlh->nlmsg_seq,
 					      NLM_F_MULTI) < 0)
+#else
+			if (ovpn_nl_send_peer_net(skb, net, peer,
+					      NETLINK_CB(cb->skb).portid,
+					      cb->nlh->nlmsg_seq,
+					      NLM_F_MULTI) < 0)
+#endif
 				break;
 
 			/* count peers being dumped during this invocation */
@@ -1237,6 +1452,7 @@ int ovpn_nl_key_swap_notify(struct ovpn_peer *peer, u8 key_id)
  *
  * Return: 0 on success, a negative error code otherwise
  */
+
 int __init ovpn_nl_register(void)
 {
 	int ret = genl_register_family(&ovpn_nl_family);
diff --git a/drivers/net/ovpn/netlink-gen.c b/drivers/net/ovpn/netlink-gen.c
index 58e1a43..074415e 100644
--- a/drivers/net/ovpn/netlink-gen.c
+++ b/drivers/net/ovpn/netlink-gen.c
@@ -11,17 +11,48 @@
 #include <uapi/linux/ovpn.h>
 
 /* Integer value ranges */
-static const struct netlink_range_validation ovpn_a_peer_id_range = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(8, 10)
+static
+#if RHEL_RELEASE_CODE > RHEL_RELEASE_VERSION(9, 4)
+const
+#endif
+struct netlink_range_validation ovpn_a_peer_id_range = {
 	.max	= 16777215ULL,
 };
+#endif
 
-static const struct netlink_range_validation ovpn_a_keyconf_peer_id_range = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(8, 10)
+static
+#if RHEL_RELEASE_CODE > RHEL_RELEASE_VERSION(9, 4)
+const
+#endif
+struct netlink_range_validation ovpn_a_keyconf_peer_id_range = {
 	.max	= 16777215ULL,
 };
+#endif
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 8, 0) && RHEL_RELEASE_CODE == 0
+static int ovpn_nla_validate_range(const struct nlattr *attr,
+				   struct netlink_ext_ack *extack)
+{
+	const u32 *value = nla_data(attr);
+
+	if (*value > 16777215) {
+		NL_SET_ERR_MSG_MOD(extack, "Value exceeds maximum");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+#endif
 
 /* Common nested types */
 const struct nla_policy ovpn_keyconf_nl_policy[OVPN_A_KEYCONF_DECRYPT_DIR + 1] = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0) || RHEL_RELEASE_CODE != 0
 	[OVPN_A_KEYCONF_PEER_ID] = NLA_POLICY_FULL_RANGE(NLA_U32, &ovpn_a_keyconf_peer_id_range),
+#else
+	[OVPN_A_KEYCONF_PEER_ID] = NLA_POLICY_VALIDATE_FN(NLA_U32, ovpn_nla_validate_range),
+#endif
 	[OVPN_A_KEYCONF_SLOT] = NLA_POLICY_MAX(NLA_U32, 1),
 	[OVPN_A_KEYCONF_KEY_ID] = NLA_POLICY_MAX(NLA_U32, 7),
 	[OVPN_A_KEYCONF_CIPHER_ALG] = NLA_POLICY_MAX(NLA_U32, 2),
@@ -35,7 +66,11 @@ const struct nla_policy ovpn_keydir_nl_policy[OVPN_A_KEYDIR_NONCE_TAIL + 1] = {
 };
 
 const struct nla_policy ovpn_peer_nl_policy[OVPN_A_PEER_LINK_TX_PACKETS + 1] = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 8, 0) || RHEL_RELEASE_CODE != 0
 	[OVPN_A_PEER_ID] = NLA_POLICY_FULL_RANGE(NLA_U32, &ovpn_a_peer_id_range),
+#else
+	[OVPN_A_PEER_ID] = NLA_POLICY_VALIDATE_FN(NLA_U32, ovpn_nla_validate_range),
+#endif
 	[OVPN_A_PEER_REMOTE_IPV4] = { .type = NLA_BE32, },
 	[OVPN_A_PEER_REMOTE_IPV6] = NLA_POLICY_EXACT_LEN(16),
 	[OVPN_A_PEER_REMOTE_IPV6_SCOPE_ID] = { .type = NLA_U32, },
@@ -79,7 +114,10 @@ static const struct nla_policy ovpn_peer_get_do_nl_policy[OVPN_A_PEER + 1] = {
 };
 
 /* OVPN_CMD_PEER_GET - dump */
-static const struct nla_policy ovpn_peer_get_dump_nl_policy[OVPN_A_IFINDEX + 1] = {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 5, 0) || RHEL_RELEASE_CODE != 0
+static
+#endif
+const struct nla_policy ovpn_peer_get_dump_nl_policy[OVPN_A_IFINDEX + 1] = {
 	[OVPN_A_IFINDEX] = { .type = NLA_U32, },
 };
 
@@ -117,22 +155,31 @@ static const struct nla_policy ovpn_key_del_nl_policy[OVPN_A_KEYCONF + 1] = {
 static const struct genl_split_ops ovpn_nl_ops[] = {
 	{
 		.cmd		= OVPN_CMD_PEER_NEW,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_peer_new_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_peer_new_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_peer_new_nl_policy,
 		.maxattr	= OVPN_A_PEER,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 	{
 		.cmd		= OVPN_CMD_PEER_SET,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_peer_set_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_peer_set_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_peer_set_nl_policy,
 		.maxattr	= OVPN_A_PEER,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 	{
 		.cmd		= OVPN_CMD_PEER_GET,
 		.pre_doit	= ovpn_nl_pre_doit,
@@ -149,49 +196,81 @@ static const struct genl_split_ops ovpn_nl_ops[] = {
 		.maxattr	= OVPN_A_IFINDEX,
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DUMP,
 	},
+#else
+	{
+		.cmd		= OVPN_CMD_PEER_GET,
+		.doit		= ovpn_nl_peer_get_doit,
+		.dumpit		= ovpn_nl_peer_get_dumpit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0)
+		.policy		= ovpn_peer_get_do_nl_policy,
+		.maxattr	= OVPN_A_PEER,
+#endif
+		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO | GENL_CMD_CAP_DUMP,
+	},
+#endif
 	{
 		.cmd		= OVPN_CMD_PEER_DEL,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_peer_del_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_peer_del_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_peer_del_nl_policy,
 		.maxattr	= OVPN_A_PEER,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 	{
 		.cmd		= OVPN_CMD_KEY_NEW,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_key_new_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_key_new_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_key_new_nl_policy,
 		.maxattr	= OVPN_A_KEYCONF,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 	{
 		.cmd		= OVPN_CMD_KEY_GET,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_key_get_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_key_get_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_key_get_nl_policy,
 		.maxattr	= OVPN_A_KEYCONF,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 	{
 		.cmd		= OVPN_CMD_KEY_SWAP,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_key_swap_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_key_swap_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_key_swap_nl_policy,
 		.maxattr	= OVPN_A_KEYCONF,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 	{
 		.cmd		= OVPN_CMD_KEY_DEL,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 		.pre_doit	= ovpn_nl_pre_doit,
-		.doit		= ovpn_nl_key_del_doit,
 		.post_doit	= ovpn_nl_post_doit,
+#endif
+		.doit		= ovpn_nl_key_del_doit,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 10, 0) || LINUX_VERSION_CODE < KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 		.policy		= ovpn_key_del_nl_policy,
 		.maxattr	= OVPN_A_KEYCONF,
+#endif
 		.flags		= GENL_ADMIN_PERM | GENL_CMD_CAP_DO,
 	},
 };
@@ -210,4 +289,9 @@ struct genl_family ovpn_nl_family __ro_after_init = {
 	.n_split_ops	= ARRAY_SIZE(ovpn_nl_ops),
 	.mcgrps		= ovpn_nl_mcgrps,
 	.n_mcgrps	= ARRAY_SIZE(ovpn_nl_mcgrps),
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 2, 0) && RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(9, 3)
+	.pre_doit	= ovpn_nl_pre_doit,
+	.post_doit	= ovpn_nl_post_doit,
+	.maxattr	= OVPN_A_MAX,
+#endif
 };
diff --git a/drivers/net/ovpn/peer.c b/drivers/net/ovpn/peer.c
index a1fd27b..9f9de26 100644
--- a/drivers/net/ovpn/peer.c
+++ b/drivers/net/ovpn/peer.c
@@ -410,7 +410,12 @@ static __be32 ovpn_nexthop_from_skb4(struct sk_buff *skb)
 {
 	const struct rtable *rt = skb_rtable(skb);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0) && \
+    LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0) && RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(8, 0)
+	if (rt && rt->rt_gw_family == AF_INET)
+#else
 	if (rt && rt->rt_uses_gateway)
+#endif
 		return rt->rt_gw4;
 
 	return ip_hdr(skb)->daddr;
@@ -791,7 +796,12 @@ static __be32 ovpn_nexthop_from_rt4(struct ovpn_priv *ovpn, __be32 dest)
 		return dest;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0) && \
+    LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0) && RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(8, 0)
+	if (!rt->rt_gw_family)
+#else
 	if (!rt->rt_uses_gateway)
+#endif
 		goto out;
 
 	dest = rt->rt_gw4;
@@ -821,9 +831,15 @@ static struct in6_addr ovpn_nexthop_from_rt6(struct ovpn_priv *ovpn,
 		.daddr = dest,
 	};
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0) || RHEL_RELEASE_CODE != 0
 	entry = ipv6_stub->ipv6_dst_lookup_flow(dev_net(ovpn->dev), NULL, &fl,
 						NULL);
 	if (IS_ERR(entry)) {
+#else
+	int err;
+	err = ipv6_stub->ipv6_dst_lookup(dev_net(ovpn->dev), NULL, &entry, &fl);
+	if (err || IS_ERR(entry)) {
+#endif
 		net_dbg_ratelimited("%s: no route to host %pI6c\n",
 				    netdev_name(ovpn->dev), &dest);
 		/* if we end up here this packet is probably going to be
diff --git a/drivers/net/ovpn/tcp.c b/drivers/net/ovpn/tcp.c
index 7c42d84..080f15e 100644
--- a/drivers/net/ovpn/tcp.c
+++ b/drivers/net/ovpn/tcp.c
@@ -7,7 +7,9 @@
  */
 
 #include <linux/skbuff.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 9, 0)
 #include <net/hotdata.h>
+#endif
 #include <net/inet_common.h>
 #include <net/ipv6.h>
 #include <net/tcp.h>
@@ -129,13 +131,22 @@ static void ovpn_tcp_rcv(struct strparser *strp, struct sk_buff *skb)
 	ovpn_recv(peer, skb);
 	return;
 err:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 	dev_dstats_rx_dropped(peer->ovpn->dev);
+#else
+	dev_core_stats_rx_dropped_inc(peer->ovpn->dev);
+#endif
 	kfree_skb(skb);
 	ovpn_peer_del(peer, OVPN_DEL_PEER_REASON_TRANSPORT_ERROR);
 }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 19, 0)
+static int ovpn_tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
+			    int _noblock, int flags, int *addr_len)
+#else
 static int ovpn_tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 			    int flags, int *addr_len)
+#endif
 {
 	int err = 0, off, copied = 0, ret;
 	struct ovpn_socket *sock;
@@ -151,7 +162,17 @@ static int ovpn_tcp_recvmsg(struct sock *sk, struct msghdr *msg, size_t len,
 	peer = sock->peer;
 	rcu_read_unlock();
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 7, 0) || RHEL_RELEASE_CODE > RHEL_RELEASE_VERSION(8, 10)
 	skb = __skb_recv_datagram(sk, &peer->tcp.user_queue, flags, &off, &err);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(5, 6, 0) || RHEL_RELEASE_CODE > RHEL_RELEASE_VERSION(8, 0)
+	skb = __skb_recv_datagram(sk, &peer->tcp.user_queue, flags, NULL, &off,
+				  &err);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0)
+	skb = __skb_recv_datagram(sk, flags, NULL, &off, &err);
+#else
+	int peeked = 0;
+	skb = __skb_recv_datagram(sk, flags, NULL, &peeked, &off, &err);
+#endif
 	if (!skb) {
 		if (err == -EAGAIN && sk->sk_shutdown & RCV_SHUTDOWN) {
 			ret = 0;
@@ -264,7 +285,11 @@ static void ovpn_tcp_send_sock(struct ovpn_peer *peer, struct sock *sk)
 
 	if (!peer->tcp.out_msg.len) {
 		preempt_disable();
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_tx_add(peer->ovpn->dev, skb->len);
+#else
+		dev_sw_netstats_tx_add(peer->ovpn->dev, 1, skb->len);
+#endif
 		preempt_enable();
 	}
 
@@ -296,7 +321,11 @@ static void ovpn_tcp_send_sock_skb(struct ovpn_peer *peer, struct sock *sk,
 		ovpn_tcp_send_sock(peer, sk);
 
 	if (peer->tcp.out_msg.skb) {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 		dev_dstats_tx_dropped(peer->ovpn->dev);
+#else
+		dev_core_stats_tx_dropped_inc(peer->ovpn->dev);
+#endif
 		kfree_skb(skb);
 		return;
 	}
@@ -317,8 +346,16 @@ void ovpn_tcp_send_skb(struct ovpn_peer *peer, struct socket *sock,
 	spin_lock_nested(&sock->sk->sk_lock.slock, OVPN_TCP_DEPTH_NESTING);
 	if (sock_owned_by_user(sock->sk)) {
 		if (skb_queue_len(&peer->tcp.out_queue) >=
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 9, 0)
 		    READ_ONCE(net_hotdata.max_backlog)) {
+#else
+		    netdev_max_backlog) {
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 			dev_dstats_tx_dropped(peer->ovpn->dev);
+#else
+			dev_core_stats_tx_dropped_inc(peer->ovpn->dev);
+#endif
 			kfree_skb(skb);
 			goto unlock;
 		}
@@ -527,7 +564,9 @@ int ovpn_tcp_socket_attach(struct ovpn_socket *ovpn_sock,
 
 	/* avoid using task_frag */
 	sock->sk->sk_allocation = GFP_ATOMIC;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0) || RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9, 3)
 	sock->sk->sk_use_task_frag = false;
+#endif
 
 	/* enqueue the RX worker */
 	strp_check_rcv(&peer->tcp.strp);
@@ -588,10 +627,36 @@ static void ovpn_tcp_build_protos(struct proto *new_prot,
 /* Initialize TCP static objects */
 void __init ovpn_tcp_init(void)
 {
+#if IS_ENABLED(CONFIG_IPV6) && LINUX_VERSION_CODE < KERNEL_VERSION(5, 8, 0) && RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(9, 0)
+	struct proto *tcpv6_prot_p, tcpv6_prot;
+#endif
+#if IS_ENABLED(CONFIG_IPV6) && LINUX_VERSION_CODE < KERNEL_VERSION(6, 16, 0)
+	struct proto_ops *inet6_stream_ops_p, inet6_stream_ops;
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 5, 0)
+	sendmsg_locked = (sendmsg_locked_t)kallsyms_lookup_name("sendmsg_locked");
+#endif
+
 	ovpn_tcp_build_protos(&ovpn_tcp_prot, &ovpn_tcp_ops, &tcp_prot,
 			      &inet_stream_ops);
 
 #if IS_ENABLED(CONFIG_IPV6)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 8, 0) && RHEL_RELEASE_CODE < RHEL_RELEASE_VERSION(9, 0)
+	tcpv6_prot_p = (struct proto *)kallsyms_lookup_name("tcpv6_prot");
+	if (!tcpv6_prot_p) {
+		pr_err("tcpv6_prot symbol not found\n");
+		return;
+	}
+	tcpv6_prot = *tcpv6_prot_p;
+#endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 16, 0)
+	inet6_stream_ops_p = (struct proto_ops *)kallsyms_lookup_name("inet6_stream_ops");
+	if (!inet6_stream_ops_p) {
+		pr_err("inet6_stream_ops symbol not found\n");
+		return;
+	}
+	inet6_stream_ops = *inet6_stream_ops_p;
+#endif
 	ovpn_tcp_build_protos(&ovpn_tcp6_prot, &ovpn_tcp6_ops, &tcpv6_prot,
 			      &inet6_stream_ops);
 #endif
diff --git a/drivers/net/ovpn/udp.c b/drivers/net/ovpn/udp.c
index aef8c04..73fa6cf 100644
--- a/drivers/net/ovpn/udp.c
+++ b/drivers/net/ovpn/udp.c
@@ -14,7 +14,9 @@
 #include <net/addrconf.h>
 #include <net/dst_cache.h>
 #include <net/route.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 2, 0) || RHEL_RELEASE_CODE != 0
 #include <net/ipv6_stubs.h>
+#endif
 #include <net/transp_v6.h>
 #include <net/udp.h>
 #include <net/udp_tunnel.h>
@@ -126,7 +128,11 @@ static int ovpn_udp_encap_recv(struct sock *sk, struct sk_buff *skb)
 	return 0;
 
 drop:
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 14, 0)
 	dev_dstats_rx_dropped(ovpn->dev);
+#else
+	dev_core_stats_rx_dropped_inc(ovpn->dev);
+#endif
 drop_noovpn:
 	kfree_skb(skb);
 	return 0;
@@ -251,8 +257,14 @@ static int ovpn_udp6_output(struct ovpn_peer *peer, struct ovpn_bind *bind,
 		dst_cache_reset(cache);
 	}
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 4, 0) || RHEL_RELEASE_CODE != 0
 	dst = ipv6_stub->ipv6_dst_lookup_flow(sock_net(sk), sk, &fl, NULL);
 	if (IS_ERR(dst)) {
+#else
+	int err;
+	err = ipv6_stub->ipv6_dst_lookup(sock_net(sk), NULL, &dst, &fl);
+	if (err || IS_ERR(dst)) {
+#endif
 		ret = PTR_ERR(dst);
 		net_dbg_ratelimited("%s: no route to host %pISpc: %d\n",
 				    netdev_name(peer->ovpn->dev),
diff --git a/tests/ovpn-cli/Makefile b/tests/ovpn-cli/Makefile
index e0926d7..ba27b36 100644
--- a/tests/ovpn-cli/Makefile
+++ b/tests/ovpn-cli/Makefile
@@ -8,6 +8,7 @@ VAR_CFLAGS = -I/usr/include/libnl3
 endif
 CFLAGS += $(VAR_CFLAGS)
 
+CFLAGS += -I../../include/uapi -I..
 
 LDLIBS = -lmbedtls -lmbedcrypto
 VAR_LDLIBS = $(shell pkg-config --libs libnl-3.0 libnl-genl-3.0 2>/dev/null)
@@ -29,4 +30,9 @@ TEST_PROGS = test.sh \
 
 TEST_GEN_FILES := ovpn-cli
 
-include ../../lib.mk
+all: $(TEST_GEN_FILES)
+
+clean:
+	rm -f $(TEST_GEN_FILES)
+
+.PHONY: all clean
diff --git a/tests/ovpn-cli/ovpn-cli.c b/tests/ovpn-cli/ovpn-cli.c
index de9c26f..c23427e 100644
--- a/tests/ovpn-cli/ovpn-cli.c
+++ b/tests/ovpn-cli/ovpn-cli.c
@@ -17,6 +17,7 @@
 #include <netinet/in.h>
 #include <time.h>
 
+#include <ovpn-cli.h>
 #include <linux/ovpn.h>
 #include <linux/types.h>
 #include <linux/netlink.h>
@@ -278,15 +279,19 @@ static int ovpn_nl_cb_error(struct sockaddr_nl (*nla)__always_unused,
 			(char *)nla_data(tb_msg[NLMSGERR_ATTR_MSG]));
 	}
 
+#ifdef NLMSGERR_ATTR_MISS_NEST
 	if (tb_msg[NLMSGERR_ATTR_MISS_NEST]) {
 		fprintf(stderr, "missing required nesting type %u\n",
 			nla_get_u32(tb_msg[NLMSGERR_ATTR_MISS_NEST]));
 	}
+#endif
 
+#ifdef NLMSGERR_ATTR_MISS_TYPE
 	if (tb_msg[NLMSGERR_ATTR_MISS_TYPE]) {
 		fprintf(stderr, "missing required attribute type %u\n",
 			nla_get_u32(tb_msg[NLMSGERR_ATTR_MISS_TYPE]));
 	}
+#endif
 
 	return NL_STOP;
 }
